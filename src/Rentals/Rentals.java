/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Rentals;

import Custom.RentalSchema;
import adminMenu.AdminMenu;
import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import static java.lang.Boolean.parseBoolean;
import static java.lang.Integer.parseInt;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Bandito
 */
public class Rentals extends javax.swing.JFrame {

    /**
     * Creates new form Rentals
     */
            private ArrayList<RentalSchema> FillTable() {
                //Se busca la data para anadir a la tabla/
                ArrayList<RentalSchema> rentalList = new ArrayList<>();
                  try{
                      String query = "SELECT * FROM RentMovie Where ReturnedOn = 'Not yet Returned!'";
                      String queryCust = "SELECT CustomersId,FirstName,LastName FROM Customers";
                      String queryMov = "SELECT MoviesId,Title FROM Movies";                      
                        ////////////
                       Class.forName("com.mysql.jdbc.Driver");  // MySQL database connection
                       Connection conn = (Connection) DriverManager.getConnection("jdbc:mysql://us-cdbr-azure-east-a.cloudapp.net:3306/movierental?" + "user=b80812adafee28&password=5b6f9d25");     
                       
                       PreparedStatement pst = (PreparedStatement) conn.prepareStatement(query); 
                       PreparedStatement cst = (PreparedStatement) conn.prepareStatement(queryCust);
                       PreparedStatement mst = (PreparedStatement) conn.prepareStatement(queryMov);                       
                       //////////////////////////////
                       ResultSet rs = pst.executeQuery();
                       ResultSet crs = cst.executeQuery();
                       ResultSet mrs = mst.executeQuery();

                       int customersId;
                       int moviesId;
                       
                       while (rs.next()) {
                            mrs.beforeFirst();
                            crs.beforeFirst();
                            RentalSchema p = new RentalSchema();                           
                            p.setMoviesId(parseInt(rs.getString("MoviesId")));
                            p.setCustomersId(parseInt(rs.getString("CustomersId")));
                            p.setRented(parseBoolean(rs.getString("Rented")));
                            p.setRentedOn(rs.getString("RentedOn"));
                            p.setReturnedOn(rs.getString("ReturnedOn"));
                            
                            while(crs.next()){
                            customersId = parseInt(crs.getString("CustomersId"));
                            if(p.getCustomersId() == customersId){
                                p.setCustomersName(crs.getString("FirstName") + " " + crs.getString("LastName"));   
                            }
                            }
                            
                            while(mrs.next()) {
                            moviesId = parseInt(mrs.getString("MoviesId"));
                            if(p.getMoviesId() == moviesId){
                                p.setTitle(mrs.getString("Title"));
                            }                                                            
                            }
                            rentalList.add(p);
                        }
                       conn.close();
                       return rentalList;
                   }
                   catch(ClassNotFoundException | SQLException e){
                       JOptionPane.showMessageDialog(null, "There was some problem with the connection. Please try again!");
                       e.printStackTrace();
                   }
                  return rentalList;
    }
     
    public Rentals() {
        initComponents();        
        ArrayList<RentalSchema> p = FillTable();
        DefaultTableModel model = (DefaultTableModel) tablaRental.getModel();
            for (RentalSchema p1 : p) {
                model.addRow(new Object[]{p1.getMoviesId(), p1.getTitle(), p1.getCustomersId(), p1.getCustomersName(), p1.getRentedOn()});
            }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaRental = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(150, 150));

        jButton2.setText("Add Rental");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        tablaRental.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MovieId", "MovieName", "CustomerId", "Customer Name", "Rented Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaRental.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tablaRental);

        jButton1.setText("Return Movie");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton3)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(0, 133, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        AdminMenu aa = new AdminMenu();
        aa.setVisible(true);
        this.setVisible(false);

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        ReturnMovie rm = new ReturnMovie();
        rm.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        NewRental nr = new NewRental();
        nr.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Rentals.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Rentals.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Rentals.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Rentals.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Rentals().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaRental;
    // End of variables declaration//GEN-END:variables
}
