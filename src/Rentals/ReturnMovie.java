/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Rentals;

import Custom.RentalSchema;
import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import static java.lang.Boolean.parseBoolean;
import static java.lang.Integer.parseInt;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author Bandito
 */
public class ReturnMovie extends javax.swing.JFrame {

    /**
     * Creates new form ReturnMovie
     */
    public ReturnMovie() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlabel1 = new javax.swing.JLabel();
        movieId = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        error = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Returns");
        setLocation(new java.awt.Point(150, 150));

        jlabel1.setText("MovieId");

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        error.setForeground(new java.awt.Color(255, 0, 51));

        jButton3.setText("back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlabel1)
                                .addGap(13, 13, 13)
                                .addComponent(movieId, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2)))
                        .addGap(18, 18, 18)
                        .addComponent(error, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton3)))
                .addContainerGap(57, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(error, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jlabel1)
                        .addComponent(movieId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(movieId.getText().length() == 0){
            error.setText("Field is required.");
        }
        else{
            String r = movieId.getText();
            validateEdit(r);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        Rentals r = new Rentals();
        r.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        Rentals r = new Rentals();
        r.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReturnMovie.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReturnMovie.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReturnMovie.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReturnMovie.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReturnMovie().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel error;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jlabel1;
    private javax.swing.JTextField movieId;
    // End of variables declaration//GEN-END:variables

    private void validateEdit(String movieId) {
        //Se utiliza este metodo para editar la informacion de la tabla RentMovie
          try{
              generateReceipt(movieId);              
              DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
              Date date = new Date();

              String query = "Update rentmovie  SET ReturnedOn = ?, Rented = false Where ReturnedOn = 'Not yet Returned!' AND MoviesID = "+ movieId;
              
                ////////////
               Class.forName("com.mysql.jdbc.Driver");  // MySQL database connection
               Connection conn = (Connection) DriverManager.getConnection("jdbc:mysql://us-cdbr-azure-east-a.cloudapp.net:3306/movierental?" + "user=b80812adafee28&password=5b6f9d25");     
               PreparedStatement pst = (PreparedStatement) conn.prepareStatement(query);
               
               
               pst.setString(1, dateFormat.format(date));
               pst.executeUpdate();

               conn.close();
           }
           catch(ClassNotFoundException | SQLException e){
               JOptionPane.showMessageDialog(null, "There was some problem with the connection. Please try again!");
               e.printStackTrace();
           }               
    }
    private void generateReceipt(String movieId) {
        //Se utiliza este metodo para generar recibo
        try{
              int cost = 2;
              DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
              Date date = new Date();

              
              String queryRM = "SELECT * FROM RentMovie Where ReturnedOn = 'Not yet Returned!' AND MoviesID =" + movieId;
              String queryC = "SELECT CustomersId,FirstName,LastName FROM Customers";
              String queryM = "SELECT MoviesId,Title FROM Movies";   
                ////////////
               Class.forName("com.mysql.jdbc.Driver");  // MySQL database connection
               Connection conn = (Connection) DriverManager.getConnection("jdbc:mysql://us-cdbr-azure-east-a.cloudapp.net:3306/movierental?" + "user=b80812adafee28&password=5b6f9d25");     
               PreparedStatement Customers = (PreparedStatement) conn.prepareStatement(queryC);
               PreparedStatement Movies = (PreparedStatement) conn.prepareStatement(queryM);
               PreparedStatement RentMovie = (PreparedStatement) conn.prepareStatement(queryRM);
               
                              
               ResultSet rs = RentMovie.executeQuery();
               ResultSet crs = Customers.executeQuery();
               ResultSet mrs = Movies.executeQuery();
               //////////////////////////////////
               int customersId;
               int moviesId;
               ArrayList<RentalSchema> rentalList = new ArrayList<>();
               
                        while (rs.next()) {
                            mrs.beforeFirst();
                            crs.beforeFirst();
                            RentalSchema p = new RentalSchema();                           
                            p.setMoviesId(parseInt(rs.getString("MoviesId")));
                            p.setCustomersId(parseInt(rs.getString("CustomersId")));
                            p.setRented(parseBoolean(rs.getString("Rented")));
                            p.setRentedOn(rs.getString("RentedOn"));
                            p.setReturnedOn(dateFormat.format(date));
                            
                            while(crs.next()){
                            customersId = parseInt(crs.getString("CustomersId"));
                            if(p.getCustomersId() == customersId){
                                p.setCustomersName(crs.getString("FirstName") + " " + crs.getString("LastName"));   
                            }
                            }
                            
                            while(mrs.next()) {
                            moviesId = parseInt(mrs.getString("MoviesId"));
                            if(p.getMoviesId() == moviesId){
                                p.setTitle(mrs.getString("Title"));
                            }                                                            
                            }
                            rentalList.add(p);
                        }

               
               //////////////////////////////
               int totalDays = (parseInt(rentalList.get(0).getReturnedOn().substring(8, 10)) - parseInt(rentalList.get(0).getRentedOn().substring(8, 10)));
               if (totalDays <= 0){
                   cost = 0;
               }
               
               JOptionPane.showMessageDialog(null,"Data was edited sccessfully");
               JOptionPane.showMessageDialog(null,"Movie: "+ rentalList.get(0).getMoviesId() 
                       + "  \nCustomer: " + rentalList.get(0).getCustomersName() 
                       + " \nRentedOn: " + rentalList.get(0).getRentedOn() +
                       "  \nReturnedOn: " + rentalList.get(0).getReturnedOn() +
                       " \nCost: $" + cost +
                       " \nTotal Days: " +  totalDays
                       + " \nTotal Cost: $" + (cost + totalDays));
                //////////////////////////////////////////////       
              
               conn.close();
            
        }
            catch(ClassNotFoundException | SQLException e){
               JOptionPane.showMessageDialog(null, "There was some problem with the connection. Please try again!");
               e.printStackTrace();
           }               
    }
}
